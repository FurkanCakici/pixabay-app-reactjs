{"version":3,"sources":["navbar/NavBar.js","component/image-results/ImageResults.js","search/Search.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","title","ImageResults","state","open","currentImg","handleOpen","img","setState","handleClose","imageListContent","images","this","props","GridList","cols","map","tags","key","id","subtitle","user","className","likes","comments","favorites","actionIcon","onClick","largeImageURL","color","src","alt","actions","label","primary","modal","onRequestClose","style","width","Component","Search","searchText","amount","category","colors","order","type","apiUrl","apiKey","onTextChange","e","val","target","value","name","Axios","get","then","res","data","hits","catch","err","console","log","onAmountChange","index","onCategoryChange","onColorsChange","onOrderChangeChange","onTypeChangeChange","onChange","floatingLabelText","fullWidth","primaryText","onOrderChange","onTypeChange","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.edc71bd9.chunk.js","sourcesContent":["import React from 'react'\r\nimport { AppBar } from \"material-ui\";\r\n\r\nconst NavBar = () => <AppBar title=\"PixaBay Image Finder\" />\r\n\r\nexport default NavBar;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { GridList, GridTile } from 'material-ui/GridList'\r\nimport IconButton from 'material-ui/IconButton'\r\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in'\r\nimport Dialog from 'material-ui/Dialog'\r\nimport FlatButton from 'material-ui/FlatButton'\r\n\r\nexport class ImageResults extends Component {\r\n    state = {\r\n        open: false,\r\n        currentImg: ''\r\n    }\r\n\r\n    handleOpen = img => {\r\n        this.setState({ open: true, currentImg: img })\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({ open: false })\r\n    }\r\n    render() {\r\n        let imageListContent;\r\n        const { images } = this.props;\r\n\r\n        if (images) {\r\n            imageListContent = (\r\n                <GridList cols={3}>\r\n                    {\r\n                        images.map(img => (\r\n                            <GridTile\r\n                                title={img.tags}\r\n                                key={img.id}\r\n                                subtitle={\r\n                                    <span>\r\n                                        <strong>by {img.user}</strong>\r\n                                        <div className=\"icons\">\r\n                                            <strong><i className=\"far fa-thumbs-up\"></i> {img.likes}</strong>\r\n                                            <strong><i className=\"far fa-comments\"></i> {img.comments}</strong>\r\n                                            <strong><i className=\"far fa-heart\"></i> {img.favorites}</strong>\r\n                                        </div>\r\n                                    </span>\r\n                                }\r\n                                actionIcon={\r\n                                    <IconButton onClick={() => this.handleOpen(img.largeImageURL)}>\r\n                                        <ZoomIn color=\"white\" />\r\n                                    </IconButton>\r\n                                }\r\n                            >\r\n                                <img src={img.largeImageURL} alt=\"\" />\r\n\r\n                            </GridTile>\r\n                        ))\r\n                    }\r\n                </GridList>\r\n            )\r\n        } else {\r\n            imageListContent = null\r\n        }\r\n\r\n        const actions = [\r\n            <FlatButton label=\"Close\" primary={true} onClick={this.handleClose} />\r\n        ]\r\n\r\n\r\n        return (\r\n            <div>\r\n                {imageListContent}\r\n                <Dialog\r\n                    actions={actions}\r\n                    modal={false}\r\n                    open={this.state.open}\r\n                    onRequestClose={this.handleClose}\r\n                >\r\n                    <img src={this.state.currentImg} alt=\"\" style={{ width: '100%' }} />\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImageResults\r\n\r\nImageResults.propTypes = {\r\n    images: PropTypes.array.isRequired\r\n}","import React, { Component } from 'react'\r\nimport TextField from 'material-ui/TextField'\r\nimport SelectField from 'material-ui/SelectField'\r\nimport { MenuItem } from 'material-ui'\r\nimport Axios from 'axios'\r\nimport ImageResults from '../component/image-results/ImageResults'\r\n\r\n\r\nexport class Search extends Component {\r\n    state = {\r\n        searchText: '',\r\n        amount: 15,\r\n        category: 'music',\r\n        colors: 'orange',\r\n        order: 'popular',\r\n        type: 'all',\r\n        apiUrl: 'https://pixabay.com/api/',\r\n        apiKey: '15485497-573f61100f19ef9e54422edc8',\r\n        images: []\r\n    }\r\n\r\n    onTextChange = (e) => {\r\n        const val = e.target.value\r\n        const { searchText, amount, category, colors, order, type, apiUrl, apiKey } = this.state;\r\n        this.setState({\r\n            [e.target.name]: val\r\n        }, () => {\r\n            if (val === '') {\r\n                this.setState({ images: [] })\r\n            } else {\r\n                Axios.get(`${apiUrl}/?key=${apiKey}&q=${searchText}&image_type=photo&per_page=${amount}&category=${category}&colors=${colors}&order=${order}&image_type=${type}&safesearch=true`)\r\n                    .then(res => this.setState({ images: res.data.hits }))\r\n                    .catch(err => console.log(err))\r\n            }\r\n        })\r\n    }\r\n\r\n    onAmountChange = (e, index, value) => this.setState({ amount: value })\r\n    onCategoryChange = (e, index, value) => this.setState({ category: value })\r\n    onColorsChange = (e, index, value) => this.setState({ colors: value })\r\n    onOrderChangeChange = (e, index, value) => this.setState({ order: value })\r\n    onTypeChangeChange = (e, index, value) => this.setState({ type: value })\r\n    render() {\r\n        return (\r\n            <div>\r\n                <TextField\r\n                    name=\"searchText\"\r\n                    value={this.state.searchText}\r\n                    onChange={this.onTextChange}\r\n                    floatingLabelText=\"Search For Images\"\r\n                    fullWidth={true}\r\n                />\r\n                <br />\r\n\r\n                <SelectField\r\n                    name=\"amount\"\r\n                    floatingLabelText=\"Amount\"\r\n                    value={this.state.amount}\r\n                    onChange={this.onAmountChange}\r\n                >\r\n                    <MenuItem value={5} primaryText=\"5\" />\r\n                    <MenuItem value={10} primaryText=\"10\" />\r\n                    <MenuItem value={15} primaryText=\"15\" />\r\n                    <MenuItem value={30} primaryText=\"30\" />\r\n                    <MenuItem value={40} primaryText=\"40\" />\r\n                    <MenuItem value={50} primaryText=\"50\" />\r\n                </SelectField>\r\n\r\n\r\n                <SelectField\r\n                    name=\"category\"\r\n                    floatingLabelText=\"Category\"\r\n                    value={this.state.category}\r\n                    onChange={this.onCategoryChange}\r\n                >\r\n                    <MenuItem value={\"music\"} primaryText=\"Music\" />\r\n                    <MenuItem value={\"backgrounds\"} primaryText=\"Backgrounds\" />\r\n                    <MenuItem value={\"fashion\"} primaryText=\"Fashion\" />\r\n                    <MenuItem value={\"nature\"} primaryText=\"Nature\" />\r\n                    <MenuItem value={\"science\"} primaryText=\"Science\" />\r\n                    <MenuItem value={\"education\"} primaryText=\"Education\" />\r\n                    <MenuItem value={\"feelings\"} primaryText=\"Feelings\" />\r\n                    <MenuItem value={\"health\"} primaryText=\"Health\" />\r\n                    <MenuItem value={\"people\"} primaryText=\"People\" />\r\n                    <MenuItem value={\"religion\"} primaryText=\"Religion\" />\r\n                    <MenuItem value={\"places\"} primaryText=\"Places\" />\r\n                    <MenuItem value={\"animals\"} primaryText=\"Animals\" />\r\n                    <MenuItem value={\"industry\"} primaryText=\"Industry\" />\r\n                    <MenuItem value={\"computer\"} primaryText=\"Computer\" />\r\n                    <MenuItem value={\"food\"} primaryText=\"Food\" />\r\n                    <MenuItem value={\"sports\"} primaryText=\"Sports\" />\r\n                    <MenuItem value={\"transportation\"} primaryText=\"Transportation\" />\r\n                    <MenuItem value={\"travel\"} primaryText=\"Travel\" />\r\n\r\n                </SelectField>\r\n\r\n                <SelectField\r\n                    name=\"colors\"\r\n                    floatingLabelText=\"Colors\"\r\n                    value={this.state.colors}\r\n                    onChange={this.onColorsChange}\r\n                >\r\n                    <MenuItem value={\"orange\"} primaryText=\"Orange\" />\r\n                    <MenuItem value={\"grayscale\"} primaryText=\"Grayscale\" />\r\n                    <MenuItem value={\"transparent\"} primaryText=\"Transparent\" />\r\n                    <MenuItem value={\"red\"} primaryText=\"Red\" />\r\n                    <MenuItem value={\"yellow\"} primaryText=\"Yellow\" />\r\n                    <MenuItem value={\"green\"} primaryText=\"Green\" />\r\n                    <MenuItem value={\"turquoise\"} primaryText=\"Turquoise\" />\r\n                    <MenuItem value={\"blue\"} primaryText=\"Blue\" />\r\n                    <MenuItem value={\"lilac\"} primaryText=\"Lilac\" />\r\n                    <MenuItem value={\"pink\"} primaryText=\"Pink\" />\r\n                    <MenuItem value={\"white\"} primaryText=\"White\" />\r\n                    <MenuItem value={\"gray\"} primaryText=\"Gray\" />\r\n                    <MenuItem value={\"black\"} primaryText=\"Black\" />\r\n                    <MenuItem value={\"brown\"} primaryText=\"Brown\" />\r\n                </SelectField>\r\n\r\n                <SelectField\r\n                    name=\"order\"\r\n                    floatingLabelText=\"Order\"\r\n                    value={this.state.order}\r\n                    onChange={this.onOrderChange}\r\n                >\r\n                    <MenuItem value={\"popular\"} primaryText=\"Popular\" />\r\n                    <MenuItem value={\"latest\"} primaryText=\"Latest\" />\r\n                </SelectField>\r\n\r\n                <SelectField\r\n                    name=\"type\"\r\n                    floatingLabelText=\"Image Type\"\r\n                    value={this.state.type}\r\n                    onChange={this.onTypeChange}\r\n                >\r\n                    <MenuItem value={\"all\"} primaryText=\"All\" />\r\n                    <MenuItem value={\"photo\"} primaryText=\"Photo\" />\r\n                    <MenuItem value={\"illustration\"} primaryText=\"Illustration\" />\r\n                    <MenuItem value={\"vector\"} primaryText=\"Vector\" />\r\n                </SelectField>\r\n\r\n                {this.state.images.length > 0 ? (<ImageResults images={this.state.images} />) : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search\r\n","import React, { Component } from 'react'\nimport NavBar from './navbar/NavBar'\nimport { MuiThemeProvider } from 'material-ui/styles'\nimport Search from './search/Search'\n\nexport class App extends Component {\n  render() {\n    return (\n      <div>\n        <MuiThemeProvider>\n          <NavBar />\n          <Search />\n        </MuiThemeProvider>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}